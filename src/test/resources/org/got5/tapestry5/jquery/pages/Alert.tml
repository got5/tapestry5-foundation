<html t:type="layout"
	xmlns:t="http://tapestry.apache.org/schema/tapestry_5_4.xsd"
	xmlns:p="tapestry:parameter">

            <div class="large-9 medium-8 columns">
              <h1 id="alerts">Alerts</h1>
              <h3 class="subheader">Alerts are handy elements you can drop into a form or inline on a page to communicate success, warnings, failure or just information. They&#39;ll conform to 100% of the container width you put them in.</h3>

<hr/>
<div data-alert="alert1" class="alert-box" t:type="any" t:mixins="foundation/foundationWidget" foundationWidget.widgetName="alert">
  This is a standard alert.
  <a href="#" class="close">&times;</a>
</div>

<hr/>
<h3>Basic</h3>

<p>You can create an alert box using minimal markup.</p>
<div class="row">
  <div class="large-6 columns">

    <h4>HTML</h4>

<pre><code class="language-html"><div class="code-container"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">&quot;alert-box&quot;</span>&gt;</span>
  <span class="comment">&lt;!-- Your content goes here --&gt;</span>
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">&quot;#&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;close&quot;</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></code></pre>


  </div>
  <div class="large-6 columns">
    <h4>Rendered HTML</h4>

<div data-alert="alert2" class="alert-box">
  This is a standard alert.
  <a href="#" class="close">&times;</a>
</div>

<p></p>  </div>
</div>
<h3>Advanced</h3>

<p>You can add more classes to your alert box to change its appearance.</p>
<div class="row">
  <div class="large-6 columns">
<h4>HTML</h4>

<pre><code class="language-html"><div class="code-container"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">&quot;alert-box success radius&quot;</span>&gt;</span>
  This is a success alert with a radius.
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">&quot;#&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;close&quot;</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">&quot;alert-box warning round&quot;</span>&gt;</span>
  This is a warning alert that is rounded.
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">&quot;#&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;close&quot;</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">&quot;alert-box info radius&quot;</span>&gt;</span>
  This is an info alert with a radius.
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">&quot;#&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;close&quot;</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">&quot;alert-box alert round&quot;</span>&gt;</span>
  This is an alert - alert that is rounded.
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">&quot;#&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;close&quot;</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">&quot;alert-box secondary&quot;</span>&gt;</span>
  This is a secondary alert.
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">&quot;#&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;close&quot;</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></code></pre>


  </div>
  <div class="large-6 columns">
<h4>Rendered HTML</h4>

<div data-alert="alert3" class="alert-box success radius">
  This is a success alert with a radius.
  <a href="#" class="close">&times;</a>
</div>

<div data-alert="alert4" class="alert-box warning round">
  This is a warning alert that is rounded.
  <a href="#" class="close">&times;</a>
</div>

<div data-alert="alert5" class="alert-box info radius">
  This is an info alert with a radius.
  <a href="#" class="close">&times;</a>
</div>

<div data-alert="alert6" class="alert-box alert round">
  This is an alert - alert that is rounded.
  <a href="#" class="close">&times;</a>
</div>

<div data-alert="alert7" class="alert-box secondary">
  This is a secondary alert.
  <a href="#" class="close">&times;</a>
</div>

<p> </p> </div>
</div>
<hr/>
<h2 id="accessibility">Accessibility</h2>
<p>To make your alerts conform to accessibility standards, use the markup below, which adds a handful of ARIA attributes to the alert container, and uses the <code>&lt;button&gt;</code> tag for the close button instead of <code>&lt;a&gt;</code>.</p>
<div class="row">
  <div class="large-6 columns">

    <h4>HTML</h4>

    <pre><code class="language-html"><div class="code-container"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">&quot;mainAlert1&quot;</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">&quot;alert-box&quot;</span> <span class="attribute">tabindex</span>=<span class="value">&quot;0&quot;</span> <span class="attribute">aria-live</span>=<span class="value">&quot;assertive&quot;</span> <span class="attribute">role</span>=<span class="value">&quot;dialogalert&quot;</span>&gt;</span>
  Your content goes here
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">href</span>=<span class="value">&quot;#&quot;</span> <span class="attribute">tabindex</span>=<span class="value">&quot;0&quot;</span> <span class="attribute">class</span>=<span class="value">&quot;close&quot;</span> <span class="attribute">aria-label</span>=<span class="value">&quot;Close Alert&quot;</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></code></pre>


  </div>
  <div class="large-6 columns">
    <h4>Rendered HTML</h4>

    <div id="mainAlert1" data-alert="mainAlert1" class="alert-box" tabindex="0" aria-live="assertive" role="dialogalert">
  Your content goes here
  <button href="#" tabindex="0" class="close" aria-label="Close Alert">&times;</button>
</div>

<p> </p> </div>
</div>
<hr/>
<h2 id="customize-with-sass">Customize with Sass</h2>
<p>Alert boxes can be easily customized using our Sass variables.</p>
<h4>SCSS</h4>

<pre><code class="language-scss"><div class="code-container">$include-<span class="tag">html</span>-alert-classes<span class="value">: $include-html-classes;</span>

<span class="comment">// We use this to control alert padding.</span>
$alert-<span class="attribute">padding-top</span><span class="value">: rem-calc(<span class="number">11</span>);</span>
$alert-<span class="attribute">padding</span>-<span class="value">default</span>-<span class="attribute">float</span><span class="value">: $alert-padding-top;</span>
$alert-<span class="attribute">padding</span>-opposite-<span class="attribute">direction</span><span class="value">: $alert-padding-top + rem-calc(<span class="number">10</span>);</span>
$alert-<span class="attribute">padding-bottom</span><span class="value">: $alert-padding-top + rem-calc(<span class="number">1</span>);</span>

<span class="comment">// We use these to control text style.</span>
$alert-<span class="attribute">font-weight</span><span class="value">: bold;</span>
$alert-<span class="attribute">font-size</span><span class="value">: rem-calc(<span class="number">14</span>);</span>
$alert-<span class="attribute">font</span>-<span class="attribute">color</span><span class="value">: <span class="hexcolor">#fff</span>;</span>
$alert-<span class="attribute">font</span>-<span class="attribute">color</span>-alt<span class="value">: scale-color($secondary-color, $lightness: -<span class="number">66</span>%);</span>

<span class="comment">// We use this for close hover effect.</span>
$alert-function-factor<span class="value">: -<span class="number">14</span>%;</span>

<span class="comment">// We use these to control border styles.</span>
$alert-<span class="attribute">border-style</span><span class="value">: solid;</span>
$alert-<span class="attribute">border-width</span><span class="value">: <span class="number">1</span>px;</span>
$alert-<span class="attribute">border-color</span><span class="value">: scale-color($primary-color, $lightness: $alert-function-factor);</span>
$alert-<span class="attribute">bottom</span>-<span class="attribute">margin</span><span class="value">: rem-calc(<span class="number">20</span>);</span>

<span class="comment">// We use these to style the close buttons</span>
$alert-close-<span class="attribute">color</span><span class="value">: <span class="hexcolor">#333</span>;</span>
$alert-close-<span class="attribute">position</span><span class="value">: rem-calc(<span class="number">5</span>);</span>
$alert-close-<span class="attribute">font-size</span><span class="value">: rem-calc(<span class="number">22</span>);</span>
$alert-close-<span class="attribute">opacity</span><span class="value">: <span class="number">0.3</span>;</span>
$alert-close-<span class="attribute">opacity</span>-hover<span class="value">: <span class="number">0.5</span>;</span>
$alert-close-<span class="attribute">padding</span><span class="value">: <span class="number">5</span>px <span class="number">4</span>px <span class="number">4</span>px;</span>

<span class="comment">// We use this to control border radius</span>
$alert-radius<span class="value">: $global-radius;</span>

<span class="comment">// We use this to control transition effects</span>
$alert-<span class="attribute">transition</span>-speed<span class="value">: <span class="number">300</span>ms;</span>
$alert-<span class="attribute">transition</span>-ease<span class="value">: ease-out;</span></div></code></pre>


<hr/>

<h2>Semantic Markup With Sass</h2>

<p>You can create your own alert boxes using our Sass mixins.</p>
<h3>Basic</h3>

<p>You can use the <code>alert()</code> mixin to create your own alert box, like so:</p>
<h4>SCSS</h4>

<pre><code class="language-scss"><div class="code-container"><span class="class">.custom-alert-box</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> alert</span>();</span>
}</div></code></pre>


<h4>HTML</h4>

<pre><code class="language-html"><div class="code-container"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">"custom-alert-box"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"close"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></code></pre>


<h3>Advanced</h3>

<p>You can further customize your alert boxes using the provided options in the <code>alert()</code> mixin:</p>
<h4>SCSS</h4>


<pre><code class="language-scss"><div class="code-container"><span class="class">.custom-alert-box</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> alert</span>(
    //<span class="preprocessor"> Adjust</span><span class="preprocessor"> the</span><span class="preprocessor"> background</span><span class="preprocessor"> of</span><span class="preprocessor"> the</span><span class="preprocessor"> alert</span>
    $bg: <span class="hexcolor">#cccccc</span>,
    //<span class="preprocessor"> Give</span><span class="preprocessor"> a</span><span class="preprocessor"> border</span><span class="preprocessor"> to</span><span class="preprocessor"> the</span><span class="preprocessor"> alert</span><span class="preprocessor"> box</span>
    $radius:<span class="preprocessor"> true</span>
  );</span>
  <span class="class">.close</span> {
    <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> alert-close</span>();</span>
  }
  &amp;<span class="class">.alert-close</span> {
    <span class="attribute">opacity</span><span class="value">: <span class="number">0</span>;</span>
  }
}</div></code></pre>


<h4>HTML</h4>

<pre><code class="language-html"><div class="code-container"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-alert</span> <span class="attribute">class</span>=<span class="value">"custom-alert-box"</span>&gt;</span>
  <span class="comment">&lt;!-- Your content goes here --&gt;</span>
  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"close"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></code></pre>


<hr/>

<h2>Configure With Javascript</h2>

<p>It&#39;s easy to configure alert boxes using our provided Javascript. You can use with data-attributes or plain old Javascript. Make sure <code>jquery.js</code>, <code>foundation.js</code>, and <code>foundation.alert.js</code> have been included on your page before continuing. For example add the following before the closing <code>&lt;body&gt;</code> tag:</p>
<h4>HTML</h4>

<pre><code class="language-html"><div class="code-container"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/vendor/jquery.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/foundation/foundation.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/foundation/foundation.alert.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></code></pre>


<hr/>

<h2>Binding to Events</h2>

<p>You can also listen for a event that fires when an alert box is closed.</p>
<h4>JS</h4>

<pre><code class="language-js"><div class="code-container">$(document).on(<span class="string">'close.fndtn.alert'</span>, <span class="keyword">function</span>(event) {
  console.info(<span class="string">'An alert box has been closed!'</span>);
});</div></code></pre>


<hr/>

<h3 id="adding-new-alert-content-after-page-load">Adding New Alert Content After Page Load</h3>
<p>If you add new content after the page has been loaded, you will need to reinitialize the Foundation JavaScript by running the following:</p>
<pre><code class="language-javascript"><div class="code-container">$(document).foundation();</div></code></pre>


<p>Reflow will make Foundation check the DOM for any elements and re-apply any listeners to them.</p>
<pre><code class="language-javascript"><div class="code-container">$(document).foundation(<span class="string">'alert'</span>, <span class="string">'reflow'</span>);</div></code></pre>


<hr/>
<h3>Sass Errors?</h3>

<p>If the default &quot;foundation&quot; import was commented out, then make sure you import this file:</p>
<h4>SCSS</h4>

<pre><code class="language-scss"><div class="code-container"><span class="at_rule">@<span class="keyword">import</span> <span class="string">"foundation/components/alert-boxes"</span>;</span></div></code></pre>

            </div>
         
</html>